pipeline TemperaturesGeraetePipeline {

    // PIPELINE
    GeraeteArchiveDownloader
        -> GeraeteArchiveUnzipper
        -> DataFilePicker
        -> TextFileInterpreter
        -> GeraeteFileCSVInterpreter
        -> HeaderRemover
        -> ColumnRemover
        -> GeraeteTableInterpreter
        -> TemperaturToFahrenheitTransformer
        -> BatterietemperaturToFahrenheitTransformer
        -> SqliteSaver
        ;




    // BLOCKS 

    // download the zip file via the given url
    block GeraeteArchiveDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }


    // unzip the downloaded zip
    block GeraeteArchiveUnzipper oftype ArchiveInterpreter {
        archiveType: "zip";
    }


    // pick the "data.csv" file in the folder
    block DataFilePicker oftype FilePicker {
        path: "/data.csv";
    }


    // interpret it as textfile => then as csv
    block TextFileInterpreter oftype TextFileInterpreter {}

    block GeraeteFileCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }


    // remove the header of the csv (with the column names; so that only the data remains)
    block HeaderRemover oftype RowDeleter {
        delete: [row 1];
    }


    // remove the unnecessary columns 
    block ColumnRemover oftype ColumnDeleter {
        delete: [column F, // latitude
            column G, // longitude
            column H, // Verschleierung
            column I // Aufenthaltsdauer im Freien
        ];
    }


    // interpret the table correctly; by this the following steps happen:
    // - all columns right of "Geraet aktiv" are removed
    // - datatypes are changed correctly
    // - input validation
    block GeraeteTableInterpreter oftype TableInterpreter {
        header: false;
        columns: [
            "Geraet" oftype IDType,
            "Hersteller" oftype text,
            "Model" oftype text,
            "Monat" oftype MonthType,
            "Temperatur" oftype decimal,
            "Batterietemperatur" oftype decimal,
            "Geraet aktiv" oftype GermanBoolean
        ];
    }


    // transform the temperature columns to Fahrenheit (2 blocks and 1 transform)
    block TemperaturToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ["Temperatur"];
        outputColumn: "Temperatur";
        use: CelsiusToFahrenheit;
    }

    block BatterietemperaturToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ["Batterietemperatur"];
        outputColumn: "Batterietemperatur";
        use: CelsiusToFahrenheit;
    }

    transform CelsiusToFahrenheit {
        from inputCelsius oftype decimal;
        to outputFahrenheit oftype decimal;
        outputFahrenheit: (inputCelsius * 9/5) + 32;
    }


    // save the prepared table into a SQLite db
    block SqliteSaver oftype SQLiteLoader {
        table: "temperatures";
        file: "temperatures.sqlite";
    }


    // VALUETYPES AND CONSTRAINTS (for validation)
    
    // ID type (only positive integers)
    valuetype IDType oftype integer {
        constraints: [
            IDRange,
        ];
    }

    constraint IDRange oftype RangeConstraint {
        lowerBound: 0;
        lowerBoundInclusive: false;
    }


    // type for months (only integers 1-12)
    valuetype MonthType oftype integer {
        constraints: [
            MonthRange,
        ];
    }

    constraint MonthRange oftype RangeConstraint {
        lowerBound: 1;
        upperBound: 12;
    }


    // type for German booleans (Ja,  Nein)
    valuetype GermanBoolean oftype text {
        constraints: [
            GermanBooleanValues,
        ];
    }

    constraint GermanBooleanValues on text:
        value in [
            "Ja", "Nein"
        ];

}